
nop                                     #main
const r1 1                              #main
const r2 82                             #main
store r2 r1                             #main
addi  r1 r1 1                           #main
const r2 0                              #main
store r2 r1                             #main
const r2 0                              #main
addi  r1 r1 1                           #main
store r2 r1                             #main
copy  r0 r1                             #main
const pc 12                             #main
addi  r1 r1 1                           #main[0].expr 1
const r2 1                              #main[0].expr 1
store r2 r1                             #main[0].expr 1
addi  r1 r1 1                           #main[1].whileCond.expr ($0 < 1000).expr $0
addi  r2 r0 1                           #main[1].whileCond.expr ($0 < 1000).expr $0
load  r2 r2                             #main[1].whileCond.expr ($0 < 1000).expr $0
store r2 r1                             #main[1].whileCond.expr ($0 < 1000).expr $0
addi  r1 r1 1                           #main[1].whileCond.expr ($0 < 1000).expr 1000
const r2 1000                           #main[1].whileCond.expr ($0 < 1000).expr 1000
store r2 r1                             #main[1].whileCond.expr ($0 < 1000).expr 1000
load  r3 r1                             #main[1].whileCond.expr ($0 < 1000)
addi  r1 r1 -1                          #main[1].whileCond.expr ($0 < 1000)
load  r2 r1                             #main[1].whileCond.expr ($0 < 1000)
lt    r2 r2 r3                          #main[1].whileCond.expr ($0 < 1000)
store r2 r1                             #main[1].whileCond.expr ($0 < 1000)
load  r3 r1                             #main[1].whileCond
addi  r1 r1 -1                          #main[1].whileCond
addi  r2 pc 20                          #main[1].whileCond
njmp  r2 r3                             #main[1].whileCond
addi  r1 r1 1                           #main[1].whileBody[0].expr ($0 + $0).expr $0
addi  r2 r0 1                           #main[1].whileBody[0].expr ($0 + $0).expr $0
load  r2 r2                             #main[1].whileBody[0].expr ($0 + $0).expr $0
store r2 r1                             #main[1].whileBody[0].expr ($0 + $0).expr $0
addi  r1 r1 1                           #main[1].whileBody[0].expr ($0 + $0).expr $0
addi  r2 r0 1                           #main[1].whileBody[0].expr ($0 + $0).expr $0
load  r2 r2                             #main[1].whileBody[0].expr ($0 + $0).expr $0
store r2 r1                             #main[1].whileBody[0].expr ($0 + $0).expr $0
load  r3 r1                             #main[1].whileBody[0].expr ($0 + $0)
addi  r1 r1 -1                          #main[1].whileBody[0].expr ($0 + $0)
load  r2 r1                             #main[1].whileBody[0].expr ($0 + $0)
add   r2 r2 r3                          #main[1].whileBody[0].expr ($0 + $0)
store r2 r1                             #main[1].whileBody[0].expr ($0 + $0)
load  r2 r1                             #main[1].whileBody[0]
addi  r1 r1 -1                          #main[1].whileBody[0]
addi  r3 r0 1                           #main[1].whileBody[0]
store r2 r3                             #main[1].whileBody[0]
addi  r2 pc -34                         #main[1].whileFooter
jump  r2                                #main[1].whileFooter
addi  r1 r1 1                           #main[2].expr $0
addi  r2 r0 1                           #main[2].expr $0
load  r2 r2                             #main[2].expr $0
store r2 r1                             #main[2].expr $0
addi  r3 r0 -1                          #main[2]
load  r3 r3                             #main[2]
load  r2 r1                             #main[2]
store r2 r3                             #main[2]
addi  r1 r1 -1                          #main[2]
addi  r3 r3 -1                          #main[2]
copy  r2 r0                             #main[2]
load  r0 r0                             #main[2]
addi  r2 r2 -1                          #main[2]
load  r1 r2                             #main[2]
addi  r2 r2 -1                          #main[2]
load  pc r2                             #main[2]
addi  r1 r1 -1                          #main
addi  r1 r1 1                           #main.forceReturn.expr 0
const r2 0                              #main.forceReturn.expr 0
store r2 r1                             #main.forceReturn.expr 0
addi  r3 r0 -1                          #main.forceReturn
load  r3 r3                             #main.forceReturn
load  r2 r1                             #main.forceReturn
store r2 r3                             #main.forceReturn
addi  r1 r1 -1                          #main.forceReturn
addi  r3 r3 -1                          #main.forceReturn
copy  r2 r0                             #main.forceReturn
load  r0 r0                             #main.forceReturn
addi  r2 r2 -1                          #main.forceReturn
load  r1 r2                             #main.forceReturn
addi  r2 r2 -1                          #main.forceReturn
load  pc r2                             #main.forceReturn
nop                                     #main