
nop                                     #main
const r1 1                              #main
const r2 238                            #main
store r2 r1                             #main
addi  r1 r1 1                           #main
const r2 0                              #main
store r2 r1                             #main
const r2 0                              #main
addi  r1 r1 1                           #main
store r2 r1                             #main
copy  r0 r1                             #main
const pc 12                             #main
const r2 4987                           #main
lt    r2 r1 r2                          #main
addi  r3 pc 6                           #main
jnz   r3 r2                             #main
const r2 0                              #main
const r3 -1000000000                    #main
store r3 r2                             #main
const r3 238                            #main
jump  r3                                #main
addi  r1 r1 1                           #main[0].expr (100, 200).expr 100
const r2 100                            #main[0].expr (100, 200).expr 100
store r2 r1                             #main[0].expr (100, 200).expr 100
addi  r1 r1 1                           #main[0].expr (100, 200).expr 200
const r2 200                            #main[0].expr (100, 200).expr 200
store r2 r1                             #main[0].expr (100, 200).expr 200
addi  r1 r1 1                           #main[1].expr (300, 400).expr 300
const r2 300                            #main[1].expr (300, 400).expr 300
store r2 r1                             #main[1].expr (300, 400).expr 300
addi  r1 r1 1                           #main[1].expr (300, 400).expr 400
const r2 400                            #main[1].expr (300, 400).expr 400
store r2 r1                             #main[1].expr (300, 400).expr 400
addi  r1 r1 2                           #main[2].expr main.complexProd($c1, $c2)
addi  r1 r1 1                           #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c1
addi  r2 r0 1                           #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c1
load  r2 r2                             #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c1
store r2 r1                             #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c1
addi  r1 r1 1                           #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c1
addi  r2 r0 2                           #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c1
load  r2 r2                             #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c1
store r2 r1                             #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c1
addi  r1 r1 1                           #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c2
addi  r2 r0 3                           #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c2
load  r2 r2                             #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c2
store r2 r1                             #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c2
addi  r1 r1 1                           #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c2
addi  r2 r0 4                           #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c2
load  r2 r2                             #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c2
store r2 r1                             #main[2].expr main.complexProd($c1, $c2).expr ($c1, $c2).expr $c2
const r3 95                             #main[2].expr main.complexProd($c1, $c2)
addi  r1 r1 1                           #main[2].expr main.complexProd($c1, $c2)
addi  r2 pc 8                           #main[2].expr main.complexProd($c1, $c2)
store r2 r1                             #main[2].expr main.complexProd($c1, $c2)
addi  r1 r1 1                           #main[2].expr main.complexProd($c1, $c2)
addi  r2 r1 -6                          #main[2].expr main.complexProd($c1, $c2)
store r2 r1                             #main[2].expr main.complexProd($c1, $c2)
addi  r1 r1 1                           #main[2].expr main.complexProd($c1, $c2)
store r0 r1                             #main[2].expr main.complexProd($c1, $c2)
copy  r0 r1                             #main[2].expr main.complexProd($c1, $c2)
copy  pc r3                             #main[2].expr main.complexProd($c1, $c2)
addi  r2 r0 4                           #main[3].expr $ans.1
addi  r2 r2 1                           #main[3].expr $ans.1
addi  r1 r1 1                           #main[3].expr $ans.1
addi  r2 r2 1                           #main[3].expr $ans.1
load  r3 r2                             #main[3].expr $ans.1
store r3 r1                             #main[3].expr $ans.1
addi  r3 r0 -1                          #main[3]
load  r3 r3                             #main[3]
load  r2 r1                             #main[3]
store r2 r3                             #main[3]
addi  r1 r1 -1                          #main[3]
addi  r3 r3 -1                          #main[3]
copy  r2 r0                             #main[3]
load  r0 r0                             #main[3]
addi  r2 r2 -1                          #main[3]
load  r1 r2                             #main[3]
addi  r2 r2 -1                          #main[3]
load  pc r2                             #main[3]
addi  r1 r1 -6                          #main
addi  r1 r1 1                           #main.forceReturn.expr 0
const r2 0                              #main.forceReturn.expr 0
store r2 r1                             #main.forceReturn.expr 0
addi  r3 r0 -1                          #main.forceReturn
load  r3 r3                             #main.forceReturn
load  r2 r1                             #main.forceReturn
store r2 r3                             #main.forceReturn
addi  r1 r1 -1                          #main.forceReturn
addi  r3 r3 -1                          #main.forceReturn
copy  r2 r0                             #main.forceReturn
load  r0 r0                             #main.forceReturn
addi  r2 r2 -1                          #main.forceReturn
load  r1 r2                             #main.forceReturn
addi  r2 r2 -1                          #main.forceReturn
load  pc r2                             #main.forceReturn
const r2 4992                           #main.complexProd
lt    r2 r1 r2                          #main.complexProd
addi  r3 pc 6                           #main.complexProd
jnz   r3 r2                             #main.complexProd
const r2 0                              #main.complexProd
const r3 -1000000000                    #main.complexProd
store r3 r2                             #main.complexProd
const r3 238                            #main.complexProd
jump  r3                                #main.complexProd
addi  r3 r0 -1                          #main.complexProd[0].expr $c1.0
load  r3 r3                             #main.complexProd[0].expr $c1.0
addi  r2 r3 0                           #main.complexProd[0].expr $c1.0
addi  r2 r2 0                           #main.complexProd[0].expr $c1.0
addi  r1 r1 1                           #main.complexProd[0].expr $c1.0
addi  r2 r2 1                           #main.complexProd[0].expr $c1.0
load  r3 r2                             #main.complexProd[0].expr $c1.0
store r3 r1                             #main.complexProd[0].expr $c1.0
addi  r3 r0 -1                          #main.complexProd[1].expr $c1.1
load  r3 r3                             #main.complexProd[1].expr $c1.1
addi  r2 r3 0                           #main.complexProd[1].expr $c1.1
addi  r2 r2 1                           #main.complexProd[1].expr $c1.1
addi  r1 r1 1                           #main.complexProd[1].expr $c1.1
addi  r2 r2 1                           #main.complexProd[1].expr $c1.1
load  r3 r2                             #main.complexProd[1].expr $c1.1
store r3 r1                             #main.complexProd[1].expr $c1.1
addi  r3 r0 -1                          #main.complexProd[2].expr $c2.0
load  r3 r3                             #main.complexProd[2].expr $c2.0
addi  r2 r3 2                           #main.complexProd[2].expr $c2.0
addi  r2 r2 0                           #main.complexProd[2].expr $c2.0
addi  r1 r1 1                           #main.complexProd[2].expr $c2.0
addi  r2 r2 1                           #main.complexProd[2].expr $c2.0
load  r3 r2                             #main.complexProd[2].expr $c2.0
store r3 r1                             #main.complexProd[2].expr $c2.0
addi  r3 r0 -1                          #main.complexProd[3].expr $c2.1
load  r3 r3                             #main.complexProd[3].expr $c2.1
addi  r2 r3 2                           #main.complexProd[3].expr $c2.1
addi  r2 r2 1                           #main.complexProd[3].expr $c2.1
addi  r1 r1 1                           #main.complexProd[3].expr $c2.1
addi  r2 r2 1                           #main.complexProd[3].expr $c2.1
load  r3 r2                             #main.complexProd[3].expr $c2.1
store r3 r1                             #main.complexProd[3].expr $c2.1
addi  r1 r1 1                           #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2).expr $re1
addi  r2 r0 1                           #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2).expr $re1
load  r2 r2                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2).expr $re1
store r2 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2).expr $re1
addi  r1 r1 1                           #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2).expr $re2
addi  r2 r0 3                           #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2).expr $re2
load  r2 r2                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2).expr $re2
store r2 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2).expr $re2
load  r3 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2)
addi  r1 r1 -1                          #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2)
load  r2 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2)
mult  r2 r2 r3                          #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2)
store r2 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($re1 * $re2)
addi  r1 r1 1                           #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2).expr $im1
addi  r2 r0 2                           #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2).expr $im1
load  r2 r2                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2).expr $im1
store r2 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2).expr $im1
addi  r1 r1 1                           #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2).expr $im2
addi  r2 r0 4                           #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2).expr $im2
load  r2 r2                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2).expr $im2
store r2 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2).expr $im2
load  r3 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2)
addi  r1 r1 -1                          #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2)
load  r2 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2)
mult  r2 r2 r3                          #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2)
store r2 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2)).expr ($im1 * $im2)
load  r3 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2))
addi  r1 r1 -1                          #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2))
load  r2 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2))
sub   r2 r2 r3                          #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2))
store r2 r1                             #main.complexProd[4].expr (($re1 * $re2) - ($im1 * $im2))
addi  r1 r1 1                           #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2).expr $re1
addi  r2 r0 1                           #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2).expr $re1
load  r2 r2                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2).expr $re1
store r2 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2).expr $re1
addi  r1 r1 1                           #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2).expr $im2
addi  r2 r0 4                           #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2).expr $im2
load  r2 r2                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2).expr $im2
store r2 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2).expr $im2
load  r3 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2)
addi  r1 r1 -1                          #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2)
load  r2 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2)
mult  r2 r2 r3                          #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2)
store r2 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($re1 * $im2)
addi  r1 r1 1                           #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2).expr $im1
addi  r2 r0 2                           #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2).expr $im1
load  r2 r2                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2).expr $im1
store r2 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2).expr $im1
addi  r1 r1 1                           #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2).expr $re2
addi  r2 r0 3                           #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2).expr $re2
load  r2 r2                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2).expr $re2
store r2 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2).expr $re2
load  r3 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2)
addi  r1 r1 -1                          #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2)
load  r2 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2)
mult  r2 r2 r3                          #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2)
store r2 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2)).expr ($im1 * $re2)
load  r3 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2))
addi  r1 r1 -1                          #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2))
load  r2 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2))
add   r2 r2 r3                          #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2))
store r2 r1                             #main.complexProd[5].expr (($re1 * $im2) + ($im1 * $re2))
addi  r1 r1 1                           #main.complexProd[6].expr ($reAns, $imAns).expr $reAns
addi  r2 r0 5                           #main.complexProd[6].expr ($reAns, $imAns).expr $reAns
load  r2 r2                             #main.complexProd[6].expr ($reAns, $imAns).expr $reAns
store r2 r1                             #main.complexProd[6].expr ($reAns, $imAns).expr $reAns
addi  r1 r1 1                           #main.complexProd[6].expr ($reAns, $imAns).expr $imAns
addi  r2 r0 6                           #main.complexProd[6].expr ($reAns, $imAns).expr $imAns
load  r2 r2                             #main.complexProd[6].expr ($reAns, $imAns).expr $imAns
store r2 r1                             #main.complexProd[6].expr ($reAns, $imAns).expr $imAns
addi  r3 r0 -1                          #main.complexProd[6]
load  r3 r3                             #main.complexProd[6]
load  r2 r1                             #main.complexProd[6]
store r2 r3                             #main.complexProd[6]
addi  r1 r1 -1                          #main.complexProd[6]
addi  r3 r3 -1                          #main.complexProd[6]
load  r2 r1                             #main.complexProd[6]
store r2 r3                             #main.complexProd[6]
addi  r1 r1 -1                          #main.complexProd[6]
addi  r3 r3 -1                          #main.complexProd[6]
copy  r2 r0                             #main.complexProd[6]
load  r0 r0                             #main.complexProd[6]
addi  r2 r2 -1                          #main.complexProd[6]
load  r1 r2                             #main.complexProd[6]
addi  r2 r2 -1                          #main.complexProd[6]
load  pc r2                             #main.complexProd[6]
addi  r1 r1 -6                          #main.complexProd
addi  r1 r1 1                           #main.complexProd.forceReturn.expr 0
const r2 0                              #main.complexProd.forceReturn.expr 0
store r2 r1                             #main.complexProd.forceReturn.expr 0
addi  r3 r0 -1                          #main.complexProd.forceReturn
load  r3 r3                             #main.complexProd.forceReturn
load  r2 r1                             #main.complexProd.forceReturn
store r2 r3                             #main.complexProd.forceReturn
addi  r1 r1 -1                          #main.complexProd.forceReturn
addi  r3 r3 -1                          #main.complexProd.forceReturn
copy  r2 r0                             #main.complexProd.forceReturn
load  r0 r0                             #main.complexProd.forceReturn
addi  r2 r2 -1                          #main.complexProd.forceReturn
load  r1 r2                             #main.complexProd.forceReturn
addi  r2 r2 -1                          #main.complexProd.forceReturn
load  pc r2                             #main.complexProd.forceReturn
nop                                     #main