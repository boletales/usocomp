
nop                                     #main
const r1 1                              #main
const r2 244                            #main
store r2 r1                             #main
addi  r1 r1 1                           #main
const r2 0                              #main
store r2 r1                             #main
const r2 0                              #main
addi  r1 r1 1                           #main
store r2 r1                             #main
copy  r0 r1                             #main
const pc 12                             #main
const r2 4986                           #main
lt    r2 r1 r2                          #main
addi  r3 pc 6                           #main
jz    r3 r2                             #main
const r2 0                              #main
const r3 -1000000000                    #main
store r3 r2                             #main
const r3 244                            #main
jump  r3                                #main
addi  r1 r1 1                           #main[0].expr (100, 200).expr 100
const r2 100                            #main[0].expr (100, 200).expr 100
store r2 r1                             #main[0].expr (100, 200).expr 100
addi  r1 r1 1                           #main[0].expr (100, 200).expr 200
const r2 200                            #main[0].expr (100, 200).expr 200
store r2 r1                             #main[0].expr (100, 200).expr 200
addi  r1 r1 1                           #main[1].expr (300, 400).expr 300
const r2 300                            #main[1].expr (300, 400).expr 300
store r2 r1                             #main[1].expr (300, 400).expr 300
addi  r1 r1 1                           #main[1].expr (300, 400).expr 400
const r2 400                            #main[1].expr (300, 400).expr 400
store r2 r1                             #main[1].expr (300, 400).expr 400
addi  r1 r1 1                           #main[2].expr 1111111
const r2 1111111                        #main[2].expr 1111111
store r2 r1                             #main[2].expr 1111111
addi  r1 r1 2                           #main[3].expr main.complexProd($0, $2)
addi  r1 r1 1                           #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $0
addi  r2 r0 1                           #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $0
load  r2 r2                             #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $0
store r2 r1                             #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $0
addi  r1 r1 1                           #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $0
addi  r2 r0 2                           #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $0
load  r2 r2                             #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $0
store r2 r1                             #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $0
addi  r1 r1 1                           #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $2
addi  r2 r0 3                           #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $2
load  r2 r2                             #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $2
store r2 r1                             #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $2
addi  r1 r1 1                           #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $2
addi  r2 r0 4                           #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $2
load  r2 r2                             #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $2
store r2 r1                             #main[3].expr main.complexProd($0, $2).expr ($0, $2).expr $2
const r3 101                            #main[3].expr main.complexProd($0, $2)
addi  r1 r1 1                           #main[3].expr main.complexProd($0, $2)
addi  r2 pc 8                           #main[3].expr main.complexProd($0, $2)
store r2 r1                             #main[3].expr main.complexProd($0, $2)
addi  r1 r1 1                           #main[3].expr main.complexProd($0, $2)
addi  r2 r1 -6                          #main[3].expr main.complexProd($0, $2)
store r2 r1                             #main[3].expr main.complexProd($0, $2)
addi  r1 r1 1                           #main[3].expr main.complexProd($0, $2)
store r0 r1                             #main[3].expr main.complexProd($0, $2)
copy  r0 r1                             #main[3].expr main.complexProd($0, $2)
copy  pc r3                             #main[3].expr main.complexProd($0, $2)
addi  r1 r1 1                           #main[4].expr 2222222
const r2 2222222                        #main[4].expr 2222222
store r2 r1                             #main[4].expr 2222222
addi  r2 r0 5                           #main[5].expr $5.1
addi  r2 r2 1                           #main[5].expr $5.1
addi  r1 r1 1                           #main[5].expr $5.1
addi  r2 r2 1                           #main[5].expr $5.1
load  r3 r2                             #main[5].expr $5.1
store r3 r1                             #main[5].expr $5.1
addi  r3 r0 -1                          #main[5]
load  r3 r3                             #main[5]
load  r2 r1                             #main[5]
store r2 r3                             #main[5]
addi  r1 r1 -1                          #main[5]
addi  r3 r3 -1                          #main[5]
copy  r2 r0                             #main[5]
load  r0 r0                             #main[5]
addi  r2 r2 -1                          #main[5]
load  r1 r2                             #main[5]
addi  r2 r2 -1                          #main[5]
load  pc r2                             #main[5]
addi  r1 r1 -8                          #main
addi  r1 r1 1                           #main.forceReturn.expr 0
const r2 0                              #main.forceReturn.expr 0
store r2 r1                             #main.forceReturn.expr 0
addi  r3 r0 -1                          #main.forceReturn
load  r3 r3                             #main.forceReturn
load  r2 r1                             #main.forceReturn
store r2 r3                             #main.forceReturn
addi  r1 r1 -1                          #main.forceReturn
addi  r3 r3 -1                          #main.forceReturn
copy  r2 r0                             #main.forceReturn
load  r0 r0                             #main.forceReturn
addi  r2 r2 -1                          #main.forceReturn
load  r1 r2                             #main.forceReturn
addi  r2 r2 -1                          #main.forceReturn
load  pc r2                             #main.forceReturn
const r2 4992                           #main.complexProd
lt    r2 r1 r2                          #main.complexProd
addi  r3 pc 6                           #main.complexProd
jz    r3 r2                             #main.complexProd
const r2 0                              #main.complexProd
const r3 -1000000000                    #main.complexProd
store r3 r2                             #main.complexProd
const r3 244                            #main.complexProd
jump  r3                                #main.complexProd
addi  r3 r0 -1                          #main.complexProd[0].expr $A0.0
load  r3 r3                             #main.complexProd[0].expr $A0.0
addi  r2 r3 0                           #main.complexProd[0].expr $A0.0
addi  r2 r2 0                           #main.complexProd[0].expr $A0.0
addi  r1 r1 1                           #main.complexProd[0].expr $A0.0
addi  r2 r2 1                           #main.complexProd[0].expr $A0.0
load  r3 r2                             #main.complexProd[0].expr $A0.0
store r3 r1                             #main.complexProd[0].expr $A0.0
addi  r3 r0 -1                          #main.complexProd[1].expr $A0.1
load  r3 r3                             #main.complexProd[1].expr $A0.1
addi  r2 r3 0                           #main.complexProd[1].expr $A0.1
addi  r2 r2 1                           #main.complexProd[1].expr $A0.1
addi  r1 r1 1                           #main.complexProd[1].expr $A0.1
addi  r2 r2 1                           #main.complexProd[1].expr $A0.1
load  r3 r2                             #main.complexProd[1].expr $A0.1
store r3 r1                             #main.complexProd[1].expr $A0.1
addi  r3 r0 -1                          #main.complexProd[2].expr $A1.0
load  r3 r3                             #main.complexProd[2].expr $A1.0
addi  r2 r3 2                           #main.complexProd[2].expr $A1.0
addi  r2 r2 0                           #main.complexProd[2].expr $A1.0
addi  r1 r1 1                           #main.complexProd[2].expr $A1.0
addi  r2 r2 1                           #main.complexProd[2].expr $A1.0
load  r3 r2                             #main.complexProd[2].expr $A1.0
store r3 r1                             #main.complexProd[2].expr $A1.0
addi  r3 r0 -1                          #main.complexProd[3].expr $A1.1
load  r3 r3                             #main.complexProd[3].expr $A1.1
addi  r2 r3 2                           #main.complexProd[3].expr $A1.1
addi  r2 r2 1                           #main.complexProd[3].expr $A1.1
addi  r1 r1 1                           #main.complexProd[3].expr $A1.1
addi  r2 r2 1                           #main.complexProd[3].expr $A1.1
load  r3 r2                             #main.complexProd[3].expr $A1.1
store r3 r1                             #main.complexProd[3].expr $A1.1
addi  r1 r1 1                           #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2).expr $0
addi  r2 r0 1                           #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2).expr $0
load  r2 r2                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2).expr $0
store r2 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2).expr $0
addi  r1 r1 1                           #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2).expr $2
addi  r2 r0 3                           #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2).expr $2
load  r2 r2                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2).expr $2
store r2 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2).expr $2
load  r3 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2)
addi  r1 r1 -1                          #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2)
load  r2 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2)
mult  r2 r2 r3                          #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2)
store r2 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($0 * $2)
addi  r1 r1 1                           #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3).expr $1
addi  r2 r0 2                           #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3).expr $1
load  r2 r2                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3).expr $1
store r2 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3).expr $1
addi  r1 r1 1                           #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3).expr $3
addi  r2 r0 4                           #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3).expr $3
load  r2 r2                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3).expr $3
store r2 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3).expr $3
load  r3 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3)
addi  r1 r1 -1                          #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3)
load  r2 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3)
mult  r2 r2 r3                          #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3)
store r2 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3)).expr ($1 * $3)
load  r3 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3))
addi  r1 r1 -1                          #main.complexProd[4].expr (($0 * $2) - ($1 * $3))
load  r2 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3))
sub   r2 r2 r3                          #main.complexProd[4].expr (($0 * $2) - ($1 * $3))
store r2 r1                             #main.complexProd[4].expr (($0 * $2) - ($1 * $3))
addi  r1 r1 1                           #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3).expr $0
addi  r2 r0 1                           #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3).expr $0
load  r2 r2                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3).expr $0
store r2 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3).expr $0
addi  r1 r1 1                           #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3).expr $3
addi  r2 r0 4                           #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3).expr $3
load  r2 r2                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3).expr $3
store r2 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3).expr $3
load  r3 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3)
addi  r1 r1 -1                          #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3)
load  r2 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3)
mult  r2 r2 r3                          #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3)
store r2 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($0 * $3)
addi  r1 r1 1                           #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2).expr $1
addi  r2 r0 2                           #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2).expr $1
load  r2 r2                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2).expr $1
store r2 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2).expr $1
addi  r1 r1 1                           #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2).expr $2
addi  r2 r0 3                           #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2).expr $2
load  r2 r2                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2).expr $2
store r2 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2).expr $2
load  r3 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2)
addi  r1 r1 -1                          #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2)
load  r2 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2)
mult  r2 r2 r3                          #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2)
store r2 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2)).expr ($1 * $2)
load  r3 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2))
addi  r1 r1 -1                          #main.complexProd[5].expr (($0 * $3) + ($1 * $2))
load  r2 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2))
add   r2 r2 r3                          #main.complexProd[5].expr (($0 * $3) + ($1 * $2))
store r2 r1                             #main.complexProd[5].expr (($0 * $3) + ($1 * $2))
addi  r1 r1 1                           #main.complexProd[6].expr ($4, $5).expr $4
addi  r2 r0 5                           #main.complexProd[6].expr ($4, $5).expr $4
load  r2 r2                             #main.complexProd[6].expr ($4, $5).expr $4
store r2 r1                             #main.complexProd[6].expr ($4, $5).expr $4
addi  r1 r1 1                           #main.complexProd[6].expr ($4, $5).expr $5
addi  r2 r0 6                           #main.complexProd[6].expr ($4, $5).expr $5
load  r2 r2                             #main.complexProd[6].expr ($4, $5).expr $5
store r2 r1                             #main.complexProd[6].expr ($4, $5).expr $5
addi  r3 r0 -1                          #main.complexProd[6]
load  r3 r3                             #main.complexProd[6]
load  r2 r1                             #main.complexProd[6]
store r2 r3                             #main.complexProd[6]
addi  r1 r1 -1                          #main.complexProd[6]
addi  r3 r3 -1                          #main.complexProd[6]
load  r2 r1                             #main.complexProd[6]
store r2 r3                             #main.complexProd[6]
addi  r1 r1 -1                          #main.complexProd[6]
addi  r3 r3 -1                          #main.complexProd[6]
copy  r2 r0                             #main.complexProd[6]
load  r0 r0                             #main.complexProd[6]
addi  r2 r2 -1                          #main.complexProd[6]
load  r1 r2                             #main.complexProd[6]
addi  r2 r2 -1                          #main.complexProd[6]
load  pc r2                             #main.complexProd[6]
addi  r1 r1 -6                          #main.complexProd
addi  r1 r1 1                           #main.complexProd.forceReturn.expr 0
const r2 0                              #main.complexProd.forceReturn.expr 0
store r2 r1                             #main.complexProd.forceReturn.expr 0
addi  r3 r0 -1                          #main.complexProd.forceReturn
load  r3 r3                             #main.complexProd.forceReturn
load  r2 r1                             #main.complexProd.forceReturn
store r2 r3                             #main.complexProd.forceReturn
addi  r1 r1 -1                          #main.complexProd.forceReturn
addi  r3 r3 -1                          #main.complexProd.forceReturn
copy  r2 r0                             #main.complexProd.forceReturn
load  r0 r0                             #main.complexProd.forceReturn
addi  r2 r2 -1                          #main.complexProd.forceReturn
load  r1 r2                             #main.complexProd.forceReturn
addi  r2 r2 -1                          #main.complexProd.forceReturn
load  pc r2                             #main.complexProd.forceReturn
nop                                     #main