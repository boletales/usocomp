
nop                                     #main
const r1 1                              #main
const r2 214                            #main
store r2 r1                             #main
addi  r1 r1 1                           #main
const r2 0                              #main
store r2 r1                             #main
const r2 0                              #main
addi  r1 r1 1                           #main
store r2 r1                             #main
copy  r0 r1                             #main
const pc 12                             #main
const r2 4993                           #main
lt    r2 r1 r2                          #main
addi  r3 pc 6                           #main
jnz   r3 r2                             #main
const r2 0                              #main
const r3 -1000000000                    #main
store r3 r2                             #main
const r3 214                            #main
jump  r3                                #main
addi  r1 r1 1                           #main[0].expr main.fibonacci(20, 0, 1)
addi  r1 r1 1                           #main[0].expr main.fibonacci(20, 0, 1).expr (20, 0, 1).expr 20
const r2 20                             #main[0].expr main.fibonacci(20, 0, 1).expr (20, 0, 1).expr 20
store r2 r1                             #main[0].expr main.fibonacci(20, 0, 1).expr (20, 0, 1).expr 20
addi  r1 r1 1                           #main[0].expr main.fibonacci(20, 0, 1).expr (20, 0, 1).expr 0
const r2 0                              #main[0].expr main.fibonacci(20, 0, 1).expr (20, 0, 1).expr 0
store r2 r1                             #main[0].expr main.fibonacci(20, 0, 1).expr (20, 0, 1).expr 0
addi  r1 r1 1                           #main[0].expr main.fibonacci(20, 0, 1).expr (20, 0, 1).expr 1
const r2 1                              #main[0].expr main.fibonacci(20, 0, 1).expr (20, 0, 1).expr 1
store r2 r1                             #main[0].expr main.fibonacci(20, 0, 1).expr (20, 0, 1).expr 1
const r3 74                             #main[0].expr main.fibonacci(20, 0, 1)
addi  r1 r1 1                           #main[0].expr main.fibonacci(20, 0, 1)
addi  r2 pc 8                           #main[0].expr main.fibonacci(20, 0, 1)
store r2 r1                             #main[0].expr main.fibonacci(20, 0, 1)
addi  r1 r1 1                           #main[0].expr main.fibonacci(20, 0, 1)
addi  r2 r1 -5                          #main[0].expr main.fibonacci(20, 0, 1)
store r2 r1                             #main[0].expr main.fibonacci(20, 0, 1)
addi  r1 r1 1                           #main[0].expr main.fibonacci(20, 0, 1)
store r0 r1                             #main[0].expr main.fibonacci(20, 0, 1)
copy  r0 r1                             #main[0].expr main.fibonacci(20, 0, 1)
copy  pc r3                             #main[0].expr main.fibonacci(20, 0, 1)
addi  r1 r1 1                           #main[1].expr $0
addi  r2 r0 1                           #main[1].expr $0
load  r2 r2                             #main[1].expr $0
store r2 r1                             #main[1].expr $0
addi  r3 r0 -1                          #main[1]
load  r3 r3                             #main[1]
load  r2 r1                             #main[1]
store r2 r3                             #main[1]
addi  r1 r1 -1                          #main[1]
addi  r3 r3 -1                          #main[1]
copy  r2 r0                             #main[1]
load  r0 r0                             #main[1]
addi  r2 r2 -1                          #main[1]
load  r1 r2                             #main[1]
addi  r2 r2 -1                          #main[1]
load  pc r2                             #main[1]
addi  r1 r1 -1                          #main
addi  r1 r1 1                           #main.forceReturn.expr 0
const r2 0                              #main.forceReturn.expr 0
store r2 r1                             #main.forceReturn.expr 0
addi  r3 r0 -1                          #main.forceReturn
load  r3 r3                             #main.forceReturn
load  r2 r1                             #main.forceReturn
store r2 r3                             #main.forceReturn
addi  r1 r1 -1                          #main.forceReturn
addi  r3 r3 -1                          #main.forceReturn
copy  r2 r0                             #main.forceReturn
load  r0 r0                             #main.forceReturn
addi  r2 r2 -1                          #main.forceReturn
load  r1 r2                             #main.forceReturn
addi  r2 r2 -1                          #main.forceReturn
load  pc r2                             #main.forceReturn
const r2 4994                           #main.fibonacci
lt    r2 r1 r2                          #main.fibonacci
addi  r3 pc 6                           #main.fibonacci
jnz   r3 r2                             #main.fibonacci
const r2 0                              #main.fibonacci
const r3 -1000000000                    #main.fibonacci
store r3 r2                             #main.fibonacci
const r3 214                            #main.fibonacci
jump  r3                                #main.fibonacci
addi  r1 r1 1                           #main.fibonacci[0].whenCond_0.expr ($A0 == 0).expr $A0
addi  r2 r0 -1                          #main.fibonacci[0].whenCond_0.expr ($A0 == 0).expr $A0
load  r2 r2                             #main.fibonacci[0].whenCond_0.expr ($A0 == 0).expr $A0
addi  r2 r2 1                           #main.fibonacci[0].whenCond_0.expr ($A0 == 0).expr $A0
load  r2 r2                             #main.fibonacci[0].whenCond_0.expr ($A0 == 0).expr $A0
store r2 r1                             #main.fibonacci[0].whenCond_0.expr ($A0 == 0).expr $A0
addi  r1 r1 1                           #main.fibonacci[0].whenCond_0.expr ($A0 == 0).expr 0
const r2 0                              #main.fibonacci[0].whenCond_0.expr ($A0 == 0).expr 0
store r2 r1                             #main.fibonacci[0].whenCond_0.expr ($A0 == 0).expr 0
load  r3 r1                             #main.fibonacci[0].whenCond_0.expr ($A0 == 0)
addi  r1 r1 -1                          #main.fibonacci[0].whenCond_0.expr ($A0 == 0)
load  r2 r1                             #main.fibonacci[0].whenCond_0.expr ($A0 == 0)
eq    r2 r2 r3                          #main.fibonacci[0].whenCond_0.expr ($A0 == 0)
store r2 r1                             #main.fibonacci[0].whenCond_0.expr ($A0 == 0)
load  r3 r1                             #main.fibonacci[0].whenCond_0
addi  r1 r1 -1                          #main.fibonacci[0].whenCond_0
addi  r2 pc 21                          #main.fibonacci[0].whenCond_0
jz    r2 r3                             #main.fibonacci[0].whenCond_0
addi  r1 r1 1                           #main.fibonacci[0].whenBody_0[0].expr $A2
addi  r2 r0 -1                          #main.fibonacci[0].whenBody_0[0].expr $A2
load  r2 r2                             #main.fibonacci[0].whenBody_0[0].expr $A2
addi  r2 r2 3                           #main.fibonacci[0].whenBody_0[0].expr $A2
load  r2 r2                             #main.fibonacci[0].whenBody_0[0].expr $A2
store r2 r1                             #main.fibonacci[0].whenBody_0[0].expr $A2
addi  r3 r0 -1                          #main.fibonacci[0].whenBody_0[0]
load  r3 r3                             #main.fibonacci[0].whenBody_0[0]
load  r2 r1                             #main.fibonacci[0].whenBody_0[0]
store r2 r3                             #main.fibonacci[0].whenBody_0[0]
addi  r1 r1 -1                          #main.fibonacci[0].whenBody_0[0]
addi  r3 r3 -1                          #main.fibonacci[0].whenBody_0[0]
copy  r2 r0                             #main.fibonacci[0].whenBody_0[0]
load  r0 r0                             #main.fibonacci[0].whenBody_0[0]
addi  r2 r2 -1                          #main.fibonacci[0].whenBody_0[0]
load  r1 r2                             #main.fibonacci[0].whenBody_0[0]
addi  r2 r2 -1                          #main.fibonacci[0].whenBody_0[0]
load  pc r2                             #main.fibonacci[0].whenBody_0[0]
addi  r2 pc 79                          #main.fibonacci[0].whenBody_0
jump  r2                                #main.fibonacci[0].whenBody_0
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1).expr $A0
addi  r2 r0 -1                          #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1).expr $A0
load  r2 r2                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1).expr $A0
addi  r2 r2 1                           #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1).expr $A0
load  r2 r2                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1).expr $A0
store r2 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1).expr $A0
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1).expr 1
const r2 1                              #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1).expr 1
store r2 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1).expr 1
load  r3 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1)
addi  r1 r1 -1                          #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1)
load  r2 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1)
sub   r2 r2 r3                          #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1)
store r2 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A0 - 1)
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr $A2
addi  r2 r0 -1                          #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr $A2
load  r2 r2                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr $A2
addi  r2 r2 3                           #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr $A2
load  r2 r2                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr $A2
store r2 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr $A2
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A1
addi  r2 r0 -1                          #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A1
load  r2 r2                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A1
addi  r2 r2 2                           #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A1
load  r2 r2                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A1
store r2 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A1
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A2
addi  r2 r0 -1                          #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A2
load  r2 r2                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A2
addi  r2 r2 3                           #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A2
load  r2 r2                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A2
store r2 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2).expr $A2
load  r3 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2)
addi  r1 r1 -1                          #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2)
load  r2 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2)
add   r2 r2 r3                          #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2)
store r2 r1                             #main.fibonacci[0].whenElseBody[0].expr (($A0 - 1), $A2, ($A1 + $A2)).expr ($A1 + $A2)
const r4 74                             #main.fibonacci[0].whenElseBody[0]
addi  r2 r0 -2                          #main.fibonacci[0].whenElseBody[0]
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0]
load  r3 r2                             #main.fibonacci[0].whenElseBody[0]
store r3 r1                             #main.fibonacci[0].whenElseBody[0]
addi  r2 r2 1                           #main.fibonacci[0].whenElseBody[0]
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0]
load  r3 r2                             #main.fibonacci[0].whenElseBody[0]
store r3 r1                             #main.fibonacci[0].whenElseBody[0]
addi  r2 r2 1                           #main.fibonacci[0].whenElseBody[0]
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0]
load  r3 r2                             #main.fibonacci[0].whenElseBody[0]
store r3 r1                             #main.fibonacci[0].whenElseBody[0]
addi  r2 r1 -5                          #main.fibonacci[0].whenElseBody[0]
addi  r3 r1 -1                          #main.fibonacci[0].whenElseBody[0]
load  r1 r3                             #main.fibonacci[0].whenElseBody[0]
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0]
addi  r0 r1 5                           #main.fibonacci[0].whenElseBody[0]
load  r3 r2                             #main.fibonacci[0].whenElseBody[0]
store r3 r1                             #main.fibonacci[0].whenElseBody[0]
addi  r2 r2 1                           #main.fibonacci[0].whenElseBody[0]
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0]
load  r3 r2                             #main.fibonacci[0].whenElseBody[0]
store r3 r1                             #main.fibonacci[0].whenElseBody[0]
addi  r2 r2 1                           #main.fibonacci[0].whenElseBody[0]
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0]
load  r3 r2                             #main.fibonacci[0].whenElseBody[0]
store r3 r1                             #main.fibonacci[0].whenElseBody[0]
addi  r2 r2 1                           #main.fibonacci[0].whenElseBody[0]
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0]
load  r3 r2                             #main.fibonacci[0].whenElseBody[0]
store r3 r1                             #main.fibonacci[0].whenElseBody[0]
addi  r2 r2 1                           #main.fibonacci[0].whenElseBody[0]
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0]
load  r3 r2                             #main.fibonacci[0].whenElseBody[0]
store r3 r1                             #main.fibonacci[0].whenElseBody[0]
addi  r2 r2 1                           #main.fibonacci[0].whenElseBody[0]
addi  r1 r1 1                           #main.fibonacci[0].whenElseBody[0]
load  r3 r2                             #main.fibonacci[0].whenElseBody[0]
store r3 r1                             #main.fibonacci[0].whenElseBody[0]
copy  pc r4                             #main.fibonacci[0].whenElseBody[0]
addi  r1 r1 1                           #main.fibonacci.forceReturn.expr 0
const r2 0                              #main.fibonacci.forceReturn.expr 0
store r2 r1                             #main.fibonacci.forceReturn.expr 0
addi  r3 r0 -1                          #main.fibonacci.forceReturn
load  r3 r3                             #main.fibonacci.forceReturn
load  r2 r1                             #main.fibonacci.forceReturn
store r2 r3                             #main.fibonacci.forceReturn
addi  r1 r1 -1                          #main.fibonacci.forceReturn
addi  r3 r3 -1                          #main.fibonacci.forceReturn
copy  r2 r0                             #main.fibonacci.forceReturn
load  r0 r0                             #main.fibonacci.forceReturn
addi  r2 r2 -1                          #main.fibonacci.forceReturn
load  r1 r2                             #main.fibonacci.forceReturn
addi  r2 r2 -1                          #main.fibonacci.forceReturn
load  pc r2                             #main.fibonacci.forceReturn
nop                                     #main